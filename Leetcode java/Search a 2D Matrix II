//Approach 1 - Brute force 

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        for(int i = 0; i < matrix.length; i++){
            for(int j = 0; j < matrix[0].length; j++){
                if(matrix[i][j] == target){
                    return true;
                }
            }
        }
        return false;
    }
}

//ANALYSIS :-
//Since, we are traversing it's all row and column therefore the Time Complexity will be O(N^2) And the Space Complexity will be O(1)


//Approach 2 - for better time complexity

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
    
        int i = 0;
        int j = matrix[0].length - 1;
        
        while(i >= 0 && i < matrix.length && j >= 0 && j < matrix[0].length){
            if(matrix[i][j] == target){
              return true;
            }
            else if(matrix[i][j] > target){
              j--;
            }
            else if(matrix[i][j] < target){
              i++;
            }
        }
        return false;
    }
}

//ANALYSIS :-
//Time Complexity :- It will be O(row + column) because we are traversing every row & column only once
//Space Complexity :- It will be O(1) as we are not using any extra memory OR space
